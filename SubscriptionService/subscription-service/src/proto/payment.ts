// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.1
// source: src/proto/payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "payment";

export enum Status {
  PENDING = 0,
  SUCCESS = 1,
  FAILED = 2,
  UNRECOGNIZED = -1,
}

export function statusFromJSON(object: any): Status {
  switch (object) {
    case 0:
    case "PENDING":
      return Status.PENDING;
    case 1:
    case "SUCCESS":
      return Status.SUCCESS;
    case 2:
    case "FAILED":
      return Status.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Status.UNRECOGNIZED;
  }
}

export function statusToJSON(object: Status): string {
  switch (object) {
    case Status.PENDING:
      return "PENDING";
    case Status.SUCCESS:
      return "SUCCESS";
    case Status.FAILED:
      return "FAILED";
    case Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PaymentRequest {
  card: PaymentRequest_Card | undefined;
  userId: number;
  amount: number;
}

export interface PaymentRequest_Card {
  cardNumber: string;
  cardOwner: string;
  validThru: string;
  cvc: number;
}

export interface PaymentResponse {
  transactionId: string;
  status: Status;
}

export interface CompensationRequest {
  transactionId: string;
}

export interface CompensationResponse {
}

export interface TransactionStatusRequest {
  transactionId: string;
}

export interface TransactionStatusResponse {
  transactionId: string;
  status: Status;
}

function createBasePaymentRequest(): PaymentRequest {
  return { card: undefined, userId: 0, amount: 0 };
}

export const PaymentRequest: MessageFns<PaymentRequest> = {
  encode(message: PaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.card !== undefined) {
      PaymentRequest_Card.encode(message.card, writer.uint32(10).fork()).join();
    }
    if (message.userId !== 0) {
      writer.uint32(16).int64(message.userId);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int32(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.card = PaymentRequest_Card.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentRequest {
    return {
      card: isSet(object.card) ? PaymentRequest_Card.fromJSON(object.card) : undefined,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: PaymentRequest): unknown {
    const obj: any = {};
    if (message.card !== undefined) {
      obj.card = PaymentRequest_Card.toJSON(message.card);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentRequest>, I>>(base?: I): PaymentRequest {
    return PaymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentRequest>, I>>(object: I): PaymentRequest {
    const message = createBasePaymentRequest();
    message.card = (object.card !== undefined && object.card !== null)
      ? PaymentRequest_Card.fromPartial(object.card)
      : undefined;
    message.userId = object.userId ?? 0;
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBasePaymentRequest_Card(): PaymentRequest_Card {
  return { cardNumber: "", cardOwner: "", validThru: "", cvc: 0 };
}

export const PaymentRequest_Card: MessageFns<PaymentRequest_Card> = {
  encode(message: PaymentRequest_Card, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cardNumber !== "") {
      writer.uint32(10).string(message.cardNumber);
    }
    if (message.cardOwner !== "") {
      writer.uint32(18).string(message.cardOwner);
    }
    if (message.validThru !== "") {
      writer.uint32(26).string(message.validThru);
    }
    if (message.cvc !== 0) {
      writer.uint32(32).int32(message.cvc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentRequest_Card {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentRequest_Card();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cardNumber = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cardOwner = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.validThru = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.cvc = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentRequest_Card {
    return {
      cardNumber: isSet(object.cardNumber) ? globalThis.String(object.cardNumber) : "",
      cardOwner: isSet(object.cardOwner) ? globalThis.String(object.cardOwner) : "",
      validThru: isSet(object.validThru) ? globalThis.String(object.validThru) : "",
      cvc: isSet(object.cvc) ? globalThis.Number(object.cvc) : 0,
    };
  },

  toJSON(message: PaymentRequest_Card): unknown {
    const obj: any = {};
    if (message.cardNumber !== "") {
      obj.cardNumber = message.cardNumber;
    }
    if (message.cardOwner !== "") {
      obj.cardOwner = message.cardOwner;
    }
    if (message.validThru !== "") {
      obj.validThru = message.validThru;
    }
    if (message.cvc !== 0) {
      obj.cvc = Math.round(message.cvc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentRequest_Card>, I>>(base?: I): PaymentRequest_Card {
    return PaymentRequest_Card.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentRequest_Card>, I>>(object: I): PaymentRequest_Card {
    const message = createBasePaymentRequest_Card();
    message.cardNumber = object.cardNumber ?? "";
    message.cardOwner = object.cardOwner ?? "";
    message.validThru = object.validThru ?? "";
    message.cvc = object.cvc ?? 0;
    return message;
  },
};

function createBasePaymentResponse(): PaymentResponse {
  return { transactionId: "", status: 0 };
}

export const PaymentResponse: MessageFns<PaymentResponse> = {
  encode(message: PaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentResponse {
    return {
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: PaymentResponse): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentResponse>, I>>(base?: I): PaymentResponse {
    return PaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentResponse>, I>>(object: I): PaymentResponse {
    const message = createBasePaymentResponse();
    message.transactionId = object.transactionId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCompensationRequest(): CompensationRequest {
  return { transactionId: "" };
}

export const CompensationRequest: MessageFns<CompensationRequest> = {
  encode(message: CompensationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompensationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompensationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompensationRequest {
    return { transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "" };
  },

  toJSON(message: CompensationRequest): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompensationRequest>, I>>(base?: I): CompensationRequest {
    return CompensationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompensationRequest>, I>>(object: I): CompensationRequest {
    const message = createBaseCompensationRequest();
    message.transactionId = object.transactionId ?? "";
    return message;
  },
};

function createBaseCompensationResponse(): CompensationResponse {
  return {};
}

export const CompensationResponse: MessageFns<CompensationResponse> = {
  encode(_: CompensationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompensationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompensationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CompensationResponse {
    return {};
  },

  toJSON(_: CompensationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CompensationResponse>, I>>(base?: I): CompensationResponse {
    return CompensationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompensationResponse>, I>>(_: I): CompensationResponse {
    const message = createBaseCompensationResponse();
    return message;
  },
};

function createBaseTransactionStatusRequest(): TransactionStatusRequest {
  return { transactionId: "" };
}

export const TransactionStatusRequest: MessageFns<TransactionStatusRequest> = {
  encode(message: TransactionStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionStatusRequest {
    return { transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "" };
  },

  toJSON(message: TransactionStatusRequest): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionStatusRequest>, I>>(base?: I): TransactionStatusRequest {
    return TransactionStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionStatusRequest>, I>>(object: I): TransactionStatusRequest {
    const message = createBaseTransactionStatusRequest();
    message.transactionId = object.transactionId ?? "";
    return message;
  },
};

function createBaseTransactionStatusResponse(): TransactionStatusResponse {
  return { transactionId: "", status: 0 };
}

export const TransactionStatusResponse: MessageFns<TransactionStatusResponse> = {
  encode(message: TransactionStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionStatusResponse {
    return {
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: TransactionStatusResponse): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionStatusResponse>, I>>(base?: I): TransactionStatusResponse {
    return TransactionStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionStatusResponse>, I>>(object: I): TransactionStatusResponse {
    const message = createBaseTransactionStatusResponse();
    message.transactionId = object.transactionId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

export interface PaymentService {
  ProcessPayment(request: PaymentRequest): Promise<PaymentResponse>;
  CompensatePayment(request: CompensationRequest): Promise<CompensationResponse>;
  GetTransactionStatus(request: TransactionStatusRequest): Promise<TransactionStatusResponse>;
}

export const PaymentServiceServiceName = "payment.PaymentService";
export class PaymentServiceClientImpl implements PaymentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PaymentServiceServiceName;
    this.rpc = rpc;
    this.ProcessPayment = this.ProcessPayment.bind(this);
    this.CompensatePayment = this.CompensatePayment.bind(this);
    this.GetTransactionStatus = this.GetTransactionStatus.bind(this);
  }
  ProcessPayment(request: PaymentRequest): Promise<PaymentResponse> {
    const data = PaymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProcessPayment", data);
    return promise.then((data) => PaymentResponse.decode(new BinaryReader(data)));
  }

  CompensatePayment(request: CompensationRequest): Promise<CompensationResponse> {
    const data = CompensationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CompensatePayment", data);
    return promise.then((data) => CompensationResponse.decode(new BinaryReader(data)));
  }

  GetTransactionStatus(request: TransactionStatusRequest): Promise<TransactionStatusResponse> {
    const data = TransactionStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTransactionStatus", data);
    return promise.then((data) => TransactionStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
