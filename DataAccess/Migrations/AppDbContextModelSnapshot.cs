// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.Property<long>("ScoredByUsersId")
                        .HasColumnType("bigint")
                        .HasColumnName("scored_by_users_id");

                    b.Property<long>("ScoredCommentsId")
                        .HasColumnType("bigint")
                        .HasColumnName("scored_comments_id");

                    b.HasKey("ScoredByUsersId", "ScoredCommentsId")
                        .HasName("pk_comment_user");

                    b.HasIndex("ScoredCommentsId")
                        .HasDatabaseName("ix_comment_user_scored_comments_id");

                    b.ToTable("comment_user", (string)null);

                    b.HasData(
                        new
                        {
                            ScoredByUsersId = -1L,
                            ScoredCommentsId = -1L
                        });
                });

            modelBuilder.Entity("ContentBaseGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.Property<long>("ContentBaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_base_id");

                    b.HasKey("GenreId", "ContentBaseId")
                        .HasName("pk_content_base_genre");

                    b.HasIndex("ContentBaseId")
                        .HasDatabaseName("ix_content_base_genre_content_base_id");

                    b.ToTable("content_base_genre", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = -1,
                            ContentBaseId = -1L
                        });
                });

            modelBuilder.Entity("ContentBaseSubscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<long>("AccessibleContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("accessible_content_id");

                    b.HasKey("SubscriptionId", "AccessibleContentId")
                        .HasName("pk_content_base_subscription");

                    b.HasIndex("AccessibleContentId")
                        .HasDatabaseName("ix_content_base_subscription_accessible_content_id");

                    b.ToTable("content_base_subscription", (string)null);

                    b.HasData(
                        new
                        {
                            SubscriptionId = 1,
                            AccessibleContentId = -1L
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommentNotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_notification_id");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("WrittenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("written_at");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("CommentNotificationId")
                        .IsUnique()
                        .HasDatabaseName("ix_comments_comment_notification_id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_comments_review_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            ReviewId = -1L,
                            Text = "Полностью согласен",
                            UserId = -2L,
                            WrittenAt = new DateTimeOffset(new DateTime(2024, 5, 1, 15, 21, 31, 5, DateTimeKind.Unspecified).AddTicks(8544), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.CommentNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<bool>("Readed")
                        .HasColumnType("boolean")
                        .HasColumnName("readed");

                    b.HasKey("Id")
                        .HasName("pk_comment_notifications");

                    b.ToTable("comment_notifications", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ContentBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("poster_url");

                    b.Property<string>("Slogan")
                        .HasColumnType("text")
                        .HasColumnName("slogan");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId")
                        .HasDatabaseName("ix_content_bases_content_type_id");

                    b.ToTable("content_bases", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.ContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type_name");

                    b.HasKey("Id")
                        .HasName("pk_content_types");

                    b.HasIndex("ContentTypeName")
                        .IsUnique()
                        .HasDatabaseName("ix_content_types_content_type_name");

                    b.ToTable("content_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ContentTypeName = "Фильм"
                        },
                        new
                        {
                            Id = -2,
                            ContentTypeName = "Сериал"
                        },
                        new
                        {
                            Id = -3,
                            ContentTypeName = "Мультфильм"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RUB"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USD"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Episode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer")
                        .HasColumnName("episode_number");

                    b.Property<int>("SeasonInfoId")
                        .HasColumnType("integer")
                        .HasColumnName("season_info_id");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_episodes");

                    b.HasIndex("SeasonInfoId")
                        .HasDatabaseName("ix_episodes_season_info_id");

                    b.ToTable("episodes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FavouriteContent", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<DateTimeOffset>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.HasKey("UserId", "ContentId")
                        .HasName("pk_favourite_contents");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_favourite_contents_content_id");

                    b.ToTable("favourite_contents", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = -1L,
                            ContentId = -1L,
                            AddedAt = new DateTimeOffset(new DateTime(2024, 5, 1, 14, 41, 31, 5, DateTimeKind.Unspecified).AddTicks(8534), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "триллер"
                        },
                        new
                        {
                            Id = -2,
                            Name = "драма"
                        },
                        new
                        {
                            Id = -3,
                            Name = "криминал"
                        });
                });

            modelBuilder.Entity("Domain.Entities.PersonInContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("integer")
                        .HasColumnName("profession_id");

                    b.HasKey("Id")
                        .HasName("pk_person_in_contents");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_person_in_contents_content_id");

                    b.HasIndex("ProfessionId")
                        .HasDatabaseName("ix_person_in_contents_profession_id");

                    b.ToTable("person_in_contents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ContentId = -1L,
                            Name = "Брэд Питт",
                            ProfessionId = -1
                        },
                        new
                        {
                            Id = -2,
                            ContentId = -1L,
                            Name = "Эдвард Нортон",
                            ProfessionId = -1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profession_name");

                    b.HasKey("Id")
                        .HasName("pk_professions");

                    b.ToTable("professions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ProfessionName = "Актер"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_positive");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("WrittenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("written_at");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_reviews_content_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            ContentId = -1L,
                            IsPositive = true,
                            Score = 9,
                            Text = "Невероятный фильм всем рекомендую, очень хороший фильм. Обожаю этот фильм не знаю, что еще сказать. Нет знаешь, нет я не знаю. Ты понял? Скажи! Мы один человек?",
                            UserId = -1L,
                            WrittenAt = new DateTimeOffset(new DateTime(2024, 5, 1, 15, 11, 31, 5, DateTimeKind.Unspecified).AddTicks(8540), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.SeasonInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer")
                        .HasColumnName("season_number");

                    b.Property<long>("SerialContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("serial_content_id");

                    b.HasKey("Id")
                        .HasName("pk_season_infos");

                    b.HasIndex("SerialContentId")
                        .HasDatabaseName("ix_season_infos_serial_content_id");

                    b.ToTable("season_infos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("MaxResolution")
                        .HasColumnType("integer")
                        .HasColumnName("max_resolution");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.ToTable("subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Все фильмы на сервисе Netflix будут доступны после приобретения этой подписки",
                            MaxResolution = 2160,
                            Name = "Фильмы",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Все сериалы только в этой подписке",
                            MaxResolution = 1080,
                            Name = "Сериалы",
                            Price = 350m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Мультфильмы для всех возрастов только в данной подписке",
                            MaxResolution = 720,
                            Name = "Мультфильмы",
                            Price = 228m
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BirthDay")
                        .HasColumnType("date")
                        .HasColumnName("birth_day");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            BirthDay = new DateOnly(2004, 5, 1),
                            Email = "testEmail@gmail.com",
                            Nickname = "testUser",
                            ProfilePictureUrl = "https://i.pinimg.com/originals/2b/64/2f/2b642f9183fa80b8c47a9d8f8971eb4d.jpg"
                        },
                        new
                        {
                            Id = -2L,
                            BirthDay = new DateOnly(1999, 5, 1),
                            Email = "testEmail2@gmail.com",
                            Nickname = "testUser2",
                            ProfilePictureUrl = "https://st.kp.yandex.net/images/actor_iphone/iphone360_25584.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserSubscription", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<DateTimeOffset>("BoughtAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bought_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.HasKey("UserId", "SubscriptionId")
                        .HasName("pk_user_subscriptions");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_user_subscriptions_subscription_id");

                    b.ToTable("user_subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = -1L,
                            SubscriptionId = 1,
                            BoughtAt = new DateTimeOffset(new DateTime(2024, 4, 29, 15, 11, 31, 5, DateTimeKind.Unspecified).AddTicks(8349), new TimeSpan(0, 3, 0, 0, 0)),
                            ExpiresAt = new DateTimeOffset(new DateTime(2024, 5, 31, 15, 11, 31, 5, DateTimeKind.Unspecified).AddTicks(8373), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.UsersReviews", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("ReviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("review_id");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_liked");

                    b.HasKey("UserId", "ReviewId")
                        .HasName("pk_users_reviews");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_users_reviews_review_id");

                    b.ToTable("users_reviews", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = -1L,
                            ReviewId = -1L,
                            IsLiked = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.MovieContent", b =>
                {
                    b.HasBaseType("Domain.Entities.ContentBase");

                    b.Property<long>("MovieLength")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_length");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.ToTable("movie_contents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            ContentTypeId = -1,
                            Country = "США",
                            Description = "Сотрудник страховой компании страдает хронической бессонницей и отчаянно пытается вырваться из мучительно скучной жизни. Однажды в очередной командировке он встречает некоего Тайлера Дёрдена — харизматического торговца мылом с извращенной философией. Тайлер уверен, что самосовершенствование — удел слабых, а единственное, ради чего стоит жить, — саморазрушение.\n\nПроходит немного времени, и вот уже новые друзья лупят друг друга почем зря на стоянке перед баром, и очищающий мордобой доставляет им высшее блаженство. Приобщая других мужчин к простым радостям физической жестокости, они основывают тайный Бойцовский клуб, который начинает пользоваться невероятной популярностью.",
                            Name = "Бойцовский клуб",
                            PosterUrl = "https://image.openmoviedb.com/kinopoisk-images/1898899/8ef070c9-2570-4540-9b83-d7ce759c0781/orig",
                            Slogan = "Интриги. Хаос. Мыло",
                            MovieLength = 139L,
                            ReleaseDate = new DateOnly(1999, 9, 10),
                            VideoUrl = "https://localhost:7173/videostream/"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SerialContent", b =>
                {
                    b.HasBaseType("Domain.Entities.ContentBase");

                    b.ToTable("serial_contents", (string)null);
                });

            modelBuilder.Entity("CommentUser", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ScoredByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_user_users_scored_by_users_id");

                    b.HasOne("Domain.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("ScoredCommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_user_comments_scored_comments_id");
                });

            modelBuilder.Entity("ContentBaseGenre", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", null)
                        .WithMany()
                        .HasForeignKey("ContentBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_base_genre_content_bases_content_base_id");

                    b.HasOne("Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_base_genre_genres_genre_id");
                });

            modelBuilder.Entity("ContentBaseSubscription", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", null)
                        .WithMany()
                        .HasForeignKey("AccessibleContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_base_subscription_content_bases_accessible_content_");

                    b.HasOne("Domain.Entities.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_base_subscription_subscriptions_subscription_id");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.CommentNotification", "CommentNotification")
                        .WithOne("Comment")
                        .HasForeignKey("Domain.Entities.Comment", "CommentNotificationId")
                        .HasConstraintName("fk_comments_comment_notifications_comment_notification_id");

                    b.HasOne("Domain.Entities.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_reviews_review_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("CommentNotification");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ContentBase", b =>
                {
                    b.HasOne("Domain.Entities.ContentType", "ContentType")
                        .WithMany("ContentsWithType")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_bases_content_types_content_type_id");

                    b.OwnsOne("Domain.Entities.AgeRatings", "AgeRatings", b1 =>
                        {
                            b1.Property<long>("ContentBaseId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<int>("Age")
                                .HasColumnType("integer")
                                .HasColumnName("age_ratings_age");

                            b1.Property<string>("AgeMpaa")
                                .HasColumnType("text")
                                .HasColumnName("age_ratings_age_mpaa");

                            b1.HasKey("ContentBaseId");

                            b1.ToTable("content_bases");

                            b1.WithOwner()
                                .HasForeignKey("ContentBaseId")
                                .HasConstraintName("fk_content_bases_content_bases_id");

                            b1.HasData(
                                new
                                {
                                    ContentBaseId = -1L,
                                    Age = 18,
                                    AgeMpaa = "R"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Budget", "Budget", b1 =>
                        {
                            b1.Property<long>("ContentBaseId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("BudgetCurrencyName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("budget_budget_currency_name");

                            b1.Property<int>("BudgetValue")
                                .HasColumnType("integer")
                                .HasColumnName("budget_budget_value");

                            b1.HasKey("ContentBaseId");

                            b1.ToTable("content_bases");

                            b1.WithOwner()
                                .HasForeignKey("ContentBaseId")
                                .HasConstraintName("fk_content_bases_content_bases_id");

                            b1.HasData(
                                new
                                {
                                    ContentBaseId = -1L,
                                    BudgetCurrencyName = "$",
                                    BudgetValue = 63000000
                                });
                        });

                    b.OwnsOne("Domain.Entities.Ratings", "Ratings", b1 =>
                        {
                            b1.Property<long>("ContentBaseId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<float?>("ImdbRating")
                                .HasColumnType("real")
                                .HasColumnName("ratings_imdb_rating");

                            b1.Property<float?>("KinopoiskRating")
                                .HasColumnType("real")
                                .HasColumnName("ratings_kinopoisk_rating");

                            b1.Property<float?>("LocalRating")
                                .HasColumnType("real")
                                .HasColumnName("ratings_local_rating");

                            b1.HasKey("ContentBaseId");

                            b1.ToTable("content_bases");

                            b1.WithOwner()
                                .HasForeignKey("ContentBaseId")
                                .HasConstraintName("fk_content_bases_content_bases_id");

                            b1.HasData(
                                new
                                {
                                    ContentBaseId = -1L,
                                    ImdbRating = 8.8f,
                                    KinopoiskRating = 8.668f,
                                    LocalRating = 0f
                                });
                        });

                    b.OwnsOne("Domain.Entities.TrailerInfo", "TrailerInfo", b1 =>
                        {
                            b1.Property<long>("ContentBaseId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("trailer_info_name");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("trailer_info_url");

                            b1.HasKey("ContentBaseId");

                            b1.ToTable("content_bases");

                            b1.WithOwner()
                                .HasForeignKey("ContentBaseId")
                                .HasConstraintName("fk_content_bases_content_bases_id");

                            b1.HasData(
                                new
                                {
                                    ContentBaseId = -1L,
                                    Name = "Theatrical Trailer(HD Fan Remaster)",
                                    Url = "https://www.youtube.com/embed/6JnN1DmbqoU"
                                });
                        });

                    b.Navigation("AgeRatings");

                    b.Navigation("Budget");

                    b.Navigation("ContentType");

                    b.Navigation("Ratings");

                    b.Navigation("TrailerInfo");
                });

            modelBuilder.Entity("Domain.Entities.Episode", b =>
                {
                    b.HasOne("Domain.Entities.SeasonInfo", "SeasonInfo")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_episodes_season_infos_season_info_id");

                    b.Navigation("SeasonInfo");
                });

            modelBuilder.Entity("Domain.Entities.FavouriteContent", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favourite_contents_content_bases_content_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FavouriteContents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_favourite_contents_users_user_id");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PersonInContent", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", "Content")
                        .WithMany("PersonsInContent")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_in_contents_content_bases_content_id");

                    b.HasOne("Domain.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_in_contents_professions_profession_id");

                    b.Navigation("Content");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", "Content")
                        .WithMany("Reviews")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_content_bases_content_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SeasonInfo", b =>
                {
                    b.HasOne("Domain.Entities.SerialContent", "SerialContent")
                        .WithMany("SeasonInfos")
                        .HasForeignKey("SerialContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_season_infos_serial_contents_serial_content_id");

                    b.Navigation("SerialContent");
                });

            modelBuilder.Entity("Domain.Entities.UserSubscription", b =>
                {
                    b.HasOne("Domain.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_subscriptions_subscription_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_users_user_id");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UsersReviews", b =>
                {
                    b.HasOne("Domain.Entities.Review", "Review")
                        .WithMany("RatedByUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_reviews_reviews_review_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ScoredReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_reviews_users_user_id");

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.MovieContent", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.MovieContent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_contents_content_bases_id");
                });

            modelBuilder.Entity("Domain.Entities.SerialContent", b =>
                {
                    b.HasOne("Domain.Entities.ContentBase", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.SerialContent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_serial_contents_content_bases_id");

                    b.OwnsOne("Domain.Entities.YearRange", "YearRange", b1 =>
                        {
                            b1.Property<long>("SerialContentId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("year_range_end");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("year_range_start");

                            b1.HasKey("SerialContentId");

                            b1.ToTable("serial_contents");

                            b1.WithOwner()
                                .HasForeignKey("SerialContentId")
                                .HasConstraintName("fk_serial_contents_serial_contents_id");
                        });

                    b.Navigation("YearRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CommentNotification", b =>
                {
                    b.Navigation("Comment")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ContentBase", b =>
                {
                    b.Navigation("PersonsInContent");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.ContentType", b =>
                {
                    b.Navigation("ContentsWithType");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("RatedByUsers");
                });

            modelBuilder.Entity("Domain.Entities.SeasonInfo", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteContents");

                    b.Navigation("Reviews");

                    b.Navigation("ScoredReviews");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.SerialContent", b =>
                {
                    b.Navigation("SeasonInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
