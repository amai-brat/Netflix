services:
  api:
    build:
      context: "."
      dockerfile: "./API/Dockerfile"
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
  
  
      - EMAIL_CONFIRMATION_ENDPOINT=https://${HOST}/api/auth/confirm-email
      - EMAIL_CHANGE_CONFIRMATION_ENDPOINT=https://${HOST}/api/auth/confirm-email-change
      
      
#      Used during ffmpeg video processing
      - HLS_BASE_URL=https://${HOST}/api
      
      
#      OAuth
      - Auth:Google:ClientId=${AUTH_GOOGLE_CLIENTID}
      - Auth:Google:ClientSecret=${AUTH_GOOGLE_CLIENTSECRET}
      - Auth:Google:AuthUri=${AUTH_GOOGLE_AUTH_URI}
      - Auth:Google:TokenUri=${AUTH_GOOGLE_TOKEN_URI}
      - Auth:Google:RedirectUri=${AUTH_GOOGLE_REDIRECT_URI}
      
      - Auth:Vk:ClientId=${AUTH_VK_CLIENTID}
      - Auth:Vk:ClientSecret=${AUTH_VK_CLIENTSECRET}
      - Auth:Vk:AuthUri=${AUTH_VK_AUTH_URI}
      - Auth:Vk:TokenUri=${AUTH_VK_TOKEN_URI}
      - Auth:Vk:RedirectUri=${AUTH_VK_REDIRECT_URI}
      - Auth:Vk:InfoReqUri=${AUTH_VK_INFO_REQUEST_URI}
        
#      Mail options
      - EmailOptions:From=${EMAIL_FROM}
      - EmailOptions:SmtpServer=${EMAIL_SMTP_SERVER}
      - EmailOptions:Port=${EMAIL_SMTP_PORT}
      - EmailOptions:Username=${EMAIL_SMTP_USER}
      - EmailOptions:Password=${EMAIL_SMTP_PASSWORD}
      
#      Database connection
      - Database:ConnectionString=${DATABASE_CONNECTION_STRING_GENERAL}
      - Database:Identity=${DATABASE_CONNECTION_STRING_IDENTITY}
        
#      Minio
      - Minio:ExternalEndpoint=${MINIO_EXTERNAL_ENDPOINT}
      - Minio:AccessKey=${MINIO_ACCESS_KEY}
      - Minio:SecretKey=${MINIO_SECRET_KEY}
      - Minio:Port=${MINIO_PORT}
      - Minio:Endpoint=${MINIO_ENDPOINT}
        
#      Redis
      - Redis:Host=${REDIS_HOST}
      - Redis:Port=${REDIS_PORT}
      - Redis:Password=${REDIS_PASSWORD}
        
#      Jwt options
      - JwtOptions:Key=${JWT_SECRET}
      - JwtOptions:AccessTokenLifetimeInMinutes=${JWT_ACCESS_LIFETIME_MINUTES}
      - JwtOptions:RefreshTokenLifetimeInDays=${JWT_REFRESH_LIFETIME_DAYS}
        
#      RabbitMq
      - RabbitMqOptions:Username=${RABBIT_USER}
      - RabbitMqOptions:Password=${RABBIT_PASSWORD}
      - RabbitMqOptions:Hostname=${RABBIT_HOST_URI}

#      Other
      - FrontendConfig:Url=${FRONTEND_URL}
      - AllowedHosts=${ALLOWED_HOSTS}
    depends_on:
      database:
        condition: service_healthy
      minio:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
  
  
  subscription-service:
    build:
      context: "./SubscriptionService/subscription-service"
      dockerfile: "./Dockerfile"
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - JWT_KEY=${JWT_SECRET}
      - DATABASE_CONNECTION_STRING_GENERAL=${DATABASE_CONNECTION_STRING_GENERAL_NODEJS}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}


  support-service:
    build:
      context: "."
      dockerfile: "./SupportAPI/Dockerfile"
    ports:
      - "8090:8090"
      - "8091:8091"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis: 
        condition: service_started
      minio-temporary:
        condition: service_started
    environment:
      - Redis:Host=${REDIS_HOST}
      - Redis:Port=${REDIS_PORT}
      - Redis:Password=${REDIS_PASSWORD}
      - ProxyMinio:Scheme=${PROXY_TEMP_MINIO_SCHEME}
      - ProxyMinio:Port=${PROXY_TEMP_MINIO_PORT}
      - ProxyMinio:RoutingKey=${PROXY_TEMP_MINIO_ROUTING_KEY}
      - ProxyMinio:Host=${PROXY_TEMP_MINIO_HOST}
      - JwtOptions:Key=${JWT_SECRET}
      - FrontendConfig:Url=${FRONTEND_URL}
      - ASPNETCORE_HTTP_PORTS=8090,8091
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMqConfig__Username=${RABBIT_USER}
      - RabbitMqConfig__Password=${RABBIT_PASSWORD}
      - RabbitMqConfig__Hostname=${RABBIT_HOST_URI}
      - Minio__AccessKey=${MINIO_TEMP_ACCESS_KEY}
      - Minio__SecretKey=${MINIO_TEMP_SECRET_KEY}
      - Minio__Port=${MINIO_TEMP_PORT}
      - Minio__Endpoint=${MINIO_TEMP_ENDPOINT}
      - Minio__ExternalEndpoint=${MINIO_TEMP_EXTERNAL_ENDPOINT}
      - FilePath__BasePath=${FILE_PATH}


  support-persistent-service:
    build:
      context: "."
      dockerfile: "./SupportPersistentAPI/Dockerfile"
    ports:
      - "10000:8080"
      - "10001:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    environment:
      - JwtOptions:Key=${JWT_SECRET}
      - Database:ConnectionString=${DATABASE_CONNECTION_STRING_SUPPORT}
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMqConfig__Username=${RABBIT_USER}
      - RabbitMqConfig__Password=${RABBIT_PASSWORD}
      - RabbitMqConfig__Hostname=${RABBIT_HOST_URI}
      - FrontendConfig:Url=${FRONTEND_URL}

  support-permanent-s3-service:
    build:
      context: .
      dockerfile: SupportPermanentS3Service/Dockerfile
    ports:
      - "10002:8080"
      - "10003:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio-permanent:
        condition: service_started
      minio-temporary:
        condition: service_started
      redis: 
        condition: service_started
    environment:
      - JwtOptions:Key=${JWT_SECRET}
      - ProxyMinio:Scheme=${PROXY_MINIO_SCHEME}
      - ProxyMinio:Port=${PROXY_MINIO_PORT}
      - ProxyMinio:RoutingKey=${PROXY_MINIO_ROUTING_KEY}
      - ProxyMinio:Host=${PROXY_MINIO_HOST}
      - RabbitMqConfig:Username=${RABBIT_USER}
      - RabbitMqConfig:Password=${RABBIT_PASSWORD}
      - RabbitMqConfig:Hostname=${RABBIT_HOST_URI}
      - Redis:Host=${REDIS_HOST}
      - Redis:Port=${REDIS_PORT}
      - Redis:Password=${REDIS_PASSWORD}
      - TempMinio:AccessKey=${MINIO_TEMP_ACCESS_KEY}
      - TempMinio:SecretKey=${MINIO_TEMP_SECRET_KEY}
      - TempMinio:Port=${MINIO_TEMP_PORT}
      - TempMinio:Endpoint=${MINIO_TEMP_ENDPOINT}
      - TempMinio:ExternalEndpoint=${MINIO_TEMP_EXTERNAL_ENDPOINT}
      - PermMinio:AccessKey=${PERM_MINIO_ACCESS_KEY}
      - PermMinio:SecretKey=${PERM_MINIO_SECRET_KEY}
      - PermMinio:Port=${PERM_MINIO_PORT}
      - PermMinio:Endpoint=${PERM_MINIO_ENDPOINT}
      - PermMinio:ExternalEndpoint=${PERM_MINIO_EXTERNAL_ENDPOINT}
      - Hangfire:ConnectionString=${DATABASE_CONNECTION_STRING_SUPPORT_HANGFIRE}
      - Database:ConnectionString=${DATABASE_CONNECTION_STRING_SUPPORT_FILES}

  payment-service:
    build:
      context: .
      dockerfile: PaymentService/Dockerfile
    ports:
      - "10004:5228"
      - "10005:5229"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - ASPNETCORE_HTTP_PORTS=5228
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings:DATABASE_CONNECTION_STRING_PAYMENT=${DATABASE_CONNECTION_STRING_PAYMENT}
   
  realtime-metrics-service:
    build:
      context: .
      dockerfile: RealtimeMetricsService/Dockerfile
    ports:
      - "5108:5108"
    depends_on:
      cassandra:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - ASPNETCORE_HTTP_PORTS=5108
      - RabbitMqOptions:Username=${RABBIT_USER}
      - RabbitMqOptions:Password=${RABBIT_PASSWORD}
      - RabbitMqOptions:Hostname=${RABBIT_HOSTNAME}
      - RabbitMqOptions:HostUri=${RABBIT_HOST_URI}
      - CassandraOptions:Username=${CASSANDRA_USER}
      - CassandraOptions:Password=${CASSANDRA_PASSWORD}
      - CassandraOptions:Hostname=${CASSANDRA_HOSTNAME}
  
  mobile-api:
    build:
      context: .
      dockerfile: MobileAPI/Dockerfile
    ports:
      - "5221:5221"
    depends_on:
      subscription-service:
        condition: service_started
      support-persistent-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - ASPNETCORE_HTTP_PORTS=5221
      # JWT
      - JwtOptions:Key=${JWT_SECRET}
      - JwtOptions:AccessTokenLifetimeInMinutes=${JWT_ACCESS_LIFETIME_MINUTES}
      - JwtOptions:RefreshTokenLifetimeInDays=${JWT_REFRESH_LIFETIME_DAYS}
      # Database connection
      - Database:ConnectionString=${DATABASE_CONNECTION_STRING_GENERAL}
      - Database:Identity=${DATABASE_CONNECTION_STRING_IDENTITY}
      # Minio
      - Minio:ExternalEndpoint=${MINIO_EXTERNAL_ENDPOINT}
      - Minio:AccessKey=${MINIO_ACCESS_KEY}
      - Minio:SecretKey=${MINIO_SECRET_KEY}
      - Minio:Port=${MINIO_PORT}
      - Minio:Endpoint=${MINIO_ENDPOINT}
      # RabbitMq
      - RabbitMqOptions:Username=${RABBIT_USER}
      - RabbitMqOptions:Password=${RABBIT_PASSWORD}
      - RabbitMqOptions:Hostname=${RABBIT_HOST_URI}
      # Services
      - Services:SubscriptionServiceUrl=http://subscription-service:3000
      - Services:SupportPersistentApiUrl=http://support-persistent-service:8080
  
  database:
    image: postgres
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  minio:
    image: quay.io/minio/minio
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
        
  minio-temporary:
    image: quay.io/minio/minio
    command: server --console-address ":9001" /data
    volumes:
      - minio-data-temporary:/data
    ports:
      - "9004:9000"
      - "9005:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    
  minio-permanent:
    image: quay.io/minio/minio
    command: server --console-address ":9001" /data
    volumes:
      - minio-data-permanent:/data
    ports:
      - "9006:9000"
      - "9007:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY} 
    
  proxy:
    build:
        context: "./Frontend"
        dockerfile: "./Dockerfile"
        target: "dev"
    volumes:
      - ./Nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ${SSL_KEY_PATH}:/root/ssl-keys/voltorka-key.txt
      - ${SSL_BUNDLE_PATH}:/root/ssl-keys/voltorka-bundle.txt
      - ${SSL_S3_KEY_PATH}:/root/ssl-keys/voltorka-s3-key.txt
      - ${SSL_S3_BUNDLE_PATH}:/root/ssl-keys/voltorka-s3-bundle.txt
      - ./Frontend/:/app
      - node_modules:/app/node_modules
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - api
      - subscription-service
      - support-service
      - minio
      - minio-permanent
      - minio-temporary
      - support-persistent-service
  
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      --requirepass ${REDIS_PASSWORD}


  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 30s
      retries: 3
  
  cassandra:
    image: cassandra:5.0.4
    ports:
      - "9042:9042"
    volumes:
      - cassandra-data:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=cloudinfra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh", "-u ${CASSANDRA_USER}", "-p {CASSANDRA_PASSWORD}" ,"-e 'describe keyspaces'"]
      interval: 2m
      start_period: 30s
      start_interval: 5s
      timeout: 10s
      retries: 3

volumes:
    redis-data:
    db-data:
    node_modules:
    rabbitmq-data:
    cassandra-data:
    minio-data:
    minio-data-temporary:
    minio-data-permanent:
      
